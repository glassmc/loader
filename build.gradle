import com.github.glassmc.kiln.standard.environment.GlassLoaderEnvironment
import com.github.glassmc.kiln.standard.CustomTransformer
import org.objectweb.asm.tree.ClassNode
import org.objectweb.asm.tree.LdcInsnNode
import org.objectweb.asm.tree.MethodNode

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = 'https://glassmc.ml/repository/'
        }
        maven {
            url = 'https://jitpack.io/'
        }
    }

    dependencies {
        classpath 'com.github.glassmc:kiln:0.8.9'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
}

apply plugin: 'kiln-main'

group 'com.github.glassmc'
version '0.9.9'

sourceCompatibility = targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    shadowImplementation 'commons-io:commons-io:2.11.0'
    shadowImplementation 'com.github.jezza:toml:1.2-java-8'
    shadowImplementation 'org.ow2.asm:asm-tree:9.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

kiln {
    environment = new GlassLoaderEnvironment(project.version as String)
    transformers = [new LoaderTransformer(project.version as String)]
}

class LoaderTransformer extends CustomTransformer {

    private final String version

    LoaderTransformer(String version) {
        this.version = version
    }

    @Override
    void map(List<ClassNode> context, Map<String, ClassNode> map) {
        ClassNode glassLoaderImpl = map.get("com/github/glassmc/loader/impl/GlassLoaderImpl")
        if (glassLoaderImpl != null) {
            MethodNode method = glassLoaderImpl.methods.stream().filter(methodNode -> {
                methodNode.name == "<init>"
            }).findFirst().get()

            for (node in method.instructions) {
                if (node instanceof LdcInsnNode && node.cst == "INSERTED_BY_BUILD") {
                    method.instructions.insert(node, new LdcInsnNode(version))
                    method.instructions.remove(node)
                    break
                }
            }
        }
    }

}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
        }
    }
}